package lab7_OOP;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;

public class Game {

	private int W = 30;
	private int H = 25;
	private int sqrtW = 30;
	private int sqrtH = 30;
	private final int wall = 1;
	private final int player = 2;
	private final int win = 3;
	private final int road = 0;
	private int maxlvl = 2;
	
	int [][]lvl1 = {
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1},
			{1,0,1,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,0,0,1,1},
			{1,0,1,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1},
			{1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1},
			{1,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1},
			{1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1},
			{1,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1},
			{1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1},
			{1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1},
			{1,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,1},
			{1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1},
			{1,1,0,1,1,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1},
			{1,1,0,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,1},
			{1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1},
			{1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1},
			{1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,1},
			{1,1,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1},
			{1,1,1,1,1,0,1,0,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1},
			{1,0,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1},
			{1,1,0,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1},
			{1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1},
			{1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1},
			{1,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,3},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
	};
	int [][]lvl2 = {
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,3},
			{1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1},
			{1,1,1,1,0,1,0,1,1,0,0,0,2,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1},
			{1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1},
			{1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1},
			{1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1},
			{1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1},
			{1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,1,1},
			{1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1},
			{1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1},
			{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,0,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			
	};
	
	int gameField[][] = lvl1;
	public boolean nextLvl(int n) {
		if(n>maxlvl) {
			return true;
		}
		switch(n) {
		case 1:
			gameField = lvl1;
			break;
		case 2:
			gameField = lvl2;
			break;
		}
		return false;
	}
	public boolean checkWin(int y, int x) {
		if(gameField[y][x] == win) {
			return true;
		}
		return false;
	}
	public int getLvl() {
		if (gameField == lvl1)
			return 1;
		else if(gameField == lvl2)
			return 2;
		else return 3;
	}
	
	public boolean checkWall(int y, int x) {
		if(gameField[y][x] != wall) {
			return true;
		}
		return false;
	}
	public int move(KeyEvent e) {
		boolean f = false;
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++) {
				if (gameField[y][x] == player) {
					int to_y = y;
					int to_x = x;
					switch (e.getKeyCode()) {
					case KeyEvent.VK_LEFT:
						to_x -= 1;
						break;
					case KeyEvent.VK_RIGHT:
						to_x += 1;						
						break;
					case KeyEvent.VK_UP:
						to_y -= 1;
						break;
					case KeyEvent.VK_DOWN:
						to_y += 1;
						break;					
					}
					if (checkWall(to_y, to_x)) {
						if (checkWin(to_y, to_x)) {
							gameField[y][x] = road;
							return 3;
						}
						gameField[y][x] = road;
						gameField[to_y][to_x] = player;
					}						
					return 0;
				}
			}
		}
		return 0;
	}
	public void draw(Graphics g) {
		for (int y = 0; y < H; y++) {
			for (int x = 0; x < W; x++) {
				switch (gameField[y][x]) {
				case road:
					g.setColor(new Color(255, 255, 255));
					g.fillRect(1 + x * sqrtW, 1 + y * sqrtH, sqrtW, sqrtH);
					break;
				case wall:
					g.setColor(new Color(166, 166, 166));
					g.fillRect(1 + x * sqrtW, 1 + y * sqrtH, sqrtW, sqrtH);
					break;
				case player:
					g.setColor(new Color(255, 255, 0));
					g.fillOval(1 + x * sqrtW, 1 + y * sqrtH, sqrtW, sqrtH);
					break;
				case win:
					g.setColor(new Color(255, 0, 0));
					g.fillRect(1 + x * sqrtW, 1 + y * sqrtH, sqrtW, sqrtH);
					break;
				
				}
			}
		}
	}
}
